/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IPreSaleInterface extends Interface {
  getFunction(nameOrSignature: "createPreSale"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BuyTokenEvent" | "PreSaleCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createPreSale",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createPreSale",
    data: BytesLike
  ): Result;
}

export namespace BuyTokenEventEvent {
  export type InputTuple = [
    ownerBuy: AddressLike,
    contractAddress: AddressLike,
    amountToken: BigNumberish,
    buyDate: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    ownerBuy: string,
    contractAddress: string,
    amountToken: bigint,
    buyDate: bigint,
    price: bigint
  ];
  export interface OutputObject {
    ownerBuy: string;
    contractAddress: string;
    amountToken: bigint;
    buyDate: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PreSaleCreatedEvent {
  export type InputTuple = [
    contractAddress: AddressLike,
    owner: AddressLike,
    startTime: BigNumberish,
    endTime: BigNumberish,
    priceToken: BigNumberish,
    amountSellToken: BigNumberish
  ];
  export type OutputTuple = [
    contractAddress: string,
    owner: string,
    startTime: bigint,
    endTime: bigint,
    priceToken: bigint,
    amountSellToken: bigint
  ];
  export interface OutputObject {
    contractAddress: string;
    owner: string;
    startTime: bigint;
    endTime: bigint;
    priceToken: bigint;
    amountSellToken: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPreSale extends BaseContract {
  connect(runner?: ContractRunner | null): IPreSale;
  waitForDeployment(): Promise<this>;

  interface: IPreSaleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createPreSale: TypedContractMethod<
    [
      startTime: BigNumberish,
      endTime: BigNumberish,
      priceToken: BigNumberish,
      amountSellToken: BigNumberish,
      owner: AddressLike,
      contractAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createPreSale"
  ): TypedContractMethod<
    [
      startTime: BigNumberish,
      endTime: BigNumberish,
      priceToken: BigNumberish,
      amountSellToken: BigNumberish,
      owner: AddressLike,
      contractAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BuyTokenEvent"
  ): TypedContractEvent<
    BuyTokenEventEvent.InputTuple,
    BuyTokenEventEvent.OutputTuple,
    BuyTokenEventEvent.OutputObject
  >;
  getEvent(
    key: "PreSaleCreated"
  ): TypedContractEvent<
    PreSaleCreatedEvent.InputTuple,
    PreSaleCreatedEvent.OutputTuple,
    PreSaleCreatedEvent.OutputObject
  >;

  filters: {
    "BuyTokenEvent(address,address,uint256,uint256,uint256)": TypedContractEvent<
      BuyTokenEventEvent.InputTuple,
      BuyTokenEventEvent.OutputTuple,
      BuyTokenEventEvent.OutputObject
    >;
    BuyTokenEvent: TypedContractEvent<
      BuyTokenEventEvent.InputTuple,
      BuyTokenEventEvent.OutputTuple,
      BuyTokenEventEvent.OutputObject
    >;

    "PreSaleCreated(address,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      PreSaleCreatedEvent.InputTuple,
      PreSaleCreatedEvent.OutputTuple,
      PreSaleCreatedEvent.OutputObject
    >;
    PreSaleCreated: TypedContractEvent<
      PreSaleCreatedEvent.InputTuple,
      PreSaleCreatedEvent.OutputTuple,
      PreSaleCreatedEvent.OutputObject
    >;
  };
}
